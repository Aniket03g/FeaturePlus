I'll create a simple Next.js app example that provides user and project information to all pages using a layout component with authentication checks. The app will use a mock auth context and redirect to a login page if the user or project is not defined. Since Next.js 13+ uses the App Router, I'll structure it accordingly.

### Approach
- Use a **Root Layout** (`app/layout.tsx`) to wrap all pages and check authentication.
- Create an **Auth Context** to manage and provide `user` and `project` data to all pages.
- Implement a simple **Login Page** (`app/login/page.tsx`) for redirection when not authenticated.
- Include a sample **Home Page** (`app/page.tsx`) that displays user and project info.
- Use TypeScript for type safety.
- Use Tailwind CSS for styling (via CDN for simplicity in this example).
- Redirect to `/login` if `user` or `project` is undefined.

### Assumptions
- Mock user and project data for demonstration (no real backend).
- Basic login page with a button to simulate login.
- Simple redirect logic using Next.js navigation.

Hereâ€™s the complete example:

```typescript
/* app/layout.tsx */
import { ReactNode, createContext, useContext } from 'react';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';

// Define types for user and project
interface User {
  id: string;
  name: string;
}

interface Project {
  id: string;
  name: string;
}

// Auth context type
interface AuthContextType {
  user: User | null;
  project: Project | null;
  login: (user: User, project: Project) => void;
  logout: () => void;
}

// Mock initial state (in a real app, this might come from an API)
const AuthContext = createContext<AuthContextType>({
  user: null,
  project: null,
  login: () => {},
  logout: () => {},
});

// Mock auth provider (simulates auth state)
const AuthProvider = ({ children }: { children: ReactNode }) => {
  // In a real app, use state management or API calls
  const router = useRouter();
  const user: User | null = null; // Simulate no user initially
  const project: Project | null = null; // Simulate no project initially

  const login = (newUser: User, newProject: Project) => {
    // In a real app, update state or call API
    console.log('Logged in:', newUser, newProject);
  };

  const logout = () => {
    // In a real app, clear state or call API
    console.log('Logged out');
  };

  // Redirect to login if user or project is not defined
  useEffect(() => {
    if (!user || !project) {
      router.push('/login');
    }
  }, [user, project]);

  return (
    <AuthContext.Provider value={{ user, project, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// Root layout
export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <head>
        <title>Next.js Auth App</title>
        <script src="https://cdn.tailwindcss.com"></script>
      </head>
      <body className="bg-gray-100 min-h-screen">
        <AuthProvider>{children}</AuthProvider>
      </body>
    </html>
  );
}

/* app/page.tsx */
import { useContext } from 'react';
import { AuthContext } from './layout';

export default function Home() {
  const { user, project } = useContext(AuthContext);

  // This won't render if redirected to login
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Welcome to the App</h1>
      <p className="text-lg">User: {user?.name || 'Not logged in'}</p>
      <p className="text-lg">Project: {project?.name || 'No project selected'}</p>
    </div>
  );
}

/* app/login/page.tsx */
import { useContext } from 'react';
import { AuthContext } from '../layout';

export default function Login() {
  const { login } = useContext(AuthContext);

  const handleLogin = () => {
    // Simulate login with mock data
    const mockUser = { id: '1', name: 'John Doe' };
    const mockProject = { id: 'p1', name: 'Project Alpha' };
    login(mockUser, mockProject);
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="bg-white p-6 rounded shadow-md">
        <h2 className="text-xl font-bold mb-4">Login</h2>
        <button
          onClick={handleLogin}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Simulate Login
        </button>
      </div>
    </div>
  );
}
```

### Explanation
1. **Root Layout (`app/layout.tsx`)**
   - Defines the `AuthContext` to share `user`, `project`, `login`, and `logout` across the app.
   - `AuthProvider` checks if `user` or `project` is `null` using `useEffect` and redirects to `/login` if either is undefined.
   - Uses Tailwind CSS via CDN for basic styling.
   - Wraps all pages to ensure consistent auth checks.

2. **Home Page (`app/page.tsx`)**
   - Consumes `user` and `project` from `AuthContext`.
   - Displays user and project info (won't render if redirected).

3. **Login Page (`app/login/page.tsx`)**
   - Provides a simple button to simulate login with mock user and project data.
   - Calls the `login` function from `AuthContext` to update state.

4. **Authentication Logic**
   - The `useEffect` in `AuthProvider` checks for `user` and `project` on every render.
   - If either is `null`, it redirects to `/login` using `router.push`.
   - In a real app, replace mock data with API calls or state management (e.g., Zustand, Redux).

5. **Dependencies in `useEffect`**
   - The dependency array `[user, project]` ensures the effect runs when `user` or `project` changes, triggering a redirect if needed.

### How to Run
1. Create a new Next.js project:
   ```bash
   npx create-next-app@latest my-auth-app --typescript
   cd my-auth-app
   ```
2. Replace the contents of `app/` with the provided code (split into `layout.tsx`, `page.tsx`, and `login/page.tsx`).
3. Run the app:
   ```bash
   npm run dev
   ```
4. Visit `http://localhost:3000`. You'll be redirected to `/login` since `user` and `project` are initially `null`.
5. Click "Simulate Login" to set mock data (in a real app, this would update state and redirect back).

### Notes
- **Mock Data**: This example uses `null` for initial `user` and `project` to trigger redirection. In a real app, fetch this data from an API or auth service (e.g., NextAuth.js, Clerk).
- **Styling**: Tailwind CSS is included via CDN for simplicity. In a production app, install Tailwind properly.
- **State Management**: For persistent state, consider using a library like Zustand or integrate with an auth provider.
- **Redirects**: The `useEffect` redirect ensures all pages are protected. You can extend this by adding a loading state or middleware for server-side checks.

This setup provides a scalable foundation for sharing `user` and `project` data across all pages while enforcing authentication. Let me know if you need further customization!
